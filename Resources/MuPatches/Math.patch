diff --git a/MsCorePkg/Library/MathLib/MathLib.c b/MsCorePkg/Library/MathLib/MathLib.c
index 3fe27b12..55ef10a8 100644
--- a/MsCorePkg/Library/MathLib/MathLib.c
+++ b/MsCorePkg/Library/MathLib/MathLib.c
@@ -142,14 +142,14 @@ cos_d (
   return value;
 }
 
-// Bit scan reverse for 64 bit values
+// Bit scan reverse for 32 bit values
 static inline UINT16
-bsr64 (
-  UINT64  value
+bsr32 (
+  UINT32  value
   )
 {
  #if __GNUC__ > 3 // if we are using GCC take advantage of their builtins
-  return 64 - __builtin_clzll (value);
+  return 32 - __builtin_clzll (value);
 
  #elif _MSC_VER > 1500 // if we are using MS VS compiler 15 or greater
   unsigned long  result;
@@ -191,9 +191,9 @@ bsr64 (
 }
 
 // helper function to get the highest bit set and zeros everything else.
-static inline UINT64
+static inline UINT32
 hibit (
-  UINT64  n
+  UINT32  n
   )
 {
   n |= (n >>  1);
@@ -201,7 +201,6 @@ hibit (
   n |= (n >>  4);
   n |= (n >>  8);
   n |= (n >> 16);
-  n |= (n >> 32);
   return n - (n >> 1);
 }
 
@@ -218,7 +217,7 @@ sqrt_d (
   IN CONST double  input
   )
 {
-  UINT64  firstGuess = (UINT64)input;
+  UINT32  firstGuess = (UINT32)input;
   double  x          = 0;
   double  prevX      = -1;
 
@@ -230,14 +229,14 @@ sqrt_d (
   // find a reasonable first approximation for faster convergence
   // sqrt(input) = sqrt(a) * 2^n roughly equals 2^n
   // We find the highest order bit and xor everything else
-  UINT64  highestOrderBit = hibit (firstGuess) /2;
+  UINT32  highestOrderBit = hibit (firstGuess) /2;
   // then we get the position of the highest or'd bit
   // we might need to use another function other than clzl since that relies on BSR
-  // this should output a bsrl on x86 and polyfill it in on ARM64
-  UINT16  highestOrderBitPosition = bsr64 (highestOrderBit);
+  // this should output a bsrl on x86 and polyfill it in on ARM
+  UINT16  highestOrderBitPosition = bsr32 (highestOrderBit);
 
   // our first guess is then just 2 ^ (n/2)
-  firstGuess = (UINT64)1 << highestOrderBitPosition/2;
+  firstGuess = (UINT32)1 << highestOrderBitPosition/2;
 
   // make sure our first guess is at least above zero
   if (firstGuess == 0) {
@@ -251,7 +250,7 @@ sqrt_d (
   // do 7 iterations
   // any further iterations yields no accuracy benefits
   // quadratic convergent so we get 4x the precision each iteration
-  for (UINT64 i = 0; i < 6 && x != 0 && prevX != x; i++) {
+  for (UINT32 i = 0; i < 6 && x != 0 && prevX != x; i++) {
     prevX = x;
     x     = .5 * (prevX + (input/prevX));
   }
